import Head from "next/head";
import NavBar from "../components/navBar";
import DashBoard from "../components/dashboard";
import { useMemo, useState, useEffect } from "react";
import "@solana/wallet-adapter-react-ui/styles.css";
import { database } from "../firebaseConfig";
import { collection, getDocs } from "firebase/firestore";
import { Loading } from "@web3uikit/core";
import axios from "axios";
import { useWallet } from "@solana/wallet-adapter-react";

export default function Home() {
  const { publicKey } = useWallet();
  const [mintAddresses, setMintAddresses] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const dbInstance = collection(database, "/CouponCollection");
  
  async function getPendingCoupons(): Promise<string[]>{
    return getDocs(dbInstance).then((data) => {
      const coupons: {
        id: string;
        mintAddress: string;
        pending: boolean;
      }[] = data.docs.map((item) => {
        return { ...item.data(), id: item.id };
      }) as any;

      let addresses = [];
      for (let i = 0; i < coupons.length; i++) {
        if (coupons[i].pending == true) {
          console.log(coupons[i])
          addresses.push(coupons[i].mintAddress);
        }
      }
      console.log("pending: ",addresses)
      return addresses;
    });
  }

  useEffect(() => {
    if (publicKey) {
      getPendingCoupons().then((pendingAddresses) => {
        axios.post("https://treehopper-backemd.onrender.com/retrieveMerchantsCoupons",{publicKey: publicKey?.toString()}).then((res) => {
          console.log(res.data.preloadedAddresses)
          const overlappingAddresses = res.data.preloadedAddresses.filter((address: any) => pendingAddresses.includes(address))
          setMintAddresses(overlappingAddresses)
          setLoading(false);
        })
      })

    }

  }, [publicKey]);

  return (
    <>
      <Head>
        <title>Treehoppers Merchant Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <NavBar />
        {loading ? (
          <div
            className="flex justify-center mx-80 my-4"
            style={{
              backgroundColor: "#efefef",
              borderRadius: "8px",
              padding: "20px",
            }}
          >
            <Loading
              fontSize={12}
              spinnerColor="#000000"
              text="Loading your pending coupons"
            />
          </div>
        ) : (
          <div className="flex flex-wrap justify-center">
          <DashBoard addresses={mintAddresses} pending={true} />
                  </div>
        )}
        {/* {mintAddresses.length == 0 && !loading && !refreshing ? <h1 className="text-center font-bold text-3xl">No Pending Coupons</h1> : null} */}
      </main>
    </>
  );
}
